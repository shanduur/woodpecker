// Code generated by gowrap. DO NOT EDIT.
// template: ../../../templates/opentelemetry.go.tpl
// gowrap: http://github.com/hexdigest/gowrap

package traced

//go:generate gowrap gen -p go.woodpecker-ci.org/woodpecker/v2/pipeline/rpc -i Peer -t ../../../templates/opentelemetry.go.tpl -o tracedpeer.gen.go -l ""

import (
	"context"

	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
	"go.woodpecker-ci.org/woodpecker/v2/pipeline/rpc"
)

// PeerWithTracing implements rpc.Peer interface instrumented with opentracing spans
type PeerWithTracing struct {
	rpc.Peer
	_instance      string
	_spanDecorator func(span trace.Span, params, results map[string]interface{})
}

// NewPeerWithTracing returns PeerWithTracing
func NewPeerWithTracing(base rpc.Peer, instance string, spanDecorator ...func(span trace.Span, params, results map[string]interface{})) PeerWithTracing {
	d := PeerWithTracing{
		Peer:      base,
		_instance: instance,
	}

	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	}

	return d
}

// Done implements rpc.Peer
func (_d PeerWithTracing) Done(ctx context.Context, id string, state rpc.State) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "rpc.Peer.Done")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":   ctx,
				"id":    id,
				"state": state}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Peer.Done(ctx, id, state)
}

// Extend implements rpc.Peer
func (_d PeerWithTracing) Extend(ctx context.Context, id string) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "rpc.Peer.Extend")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"id":  id}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Peer.Extend(ctx, id)
}

// Init implements rpc.Peer
func (_d PeerWithTracing) Init(ctx context.Context, id string, state rpc.State) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "rpc.Peer.Init")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":   ctx,
				"id":    id,
				"state": state}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Peer.Init(ctx, id, state)
}

// Log implements rpc.Peer
func (_d PeerWithTracing) Log(ctx context.Context, logEntry *rpc.LogEntry) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "rpc.Peer.Log")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"logEntry": logEntry}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Peer.Log(ctx, logEntry)
}

// Next implements rpc.Peer
func (_d PeerWithTracing) Next(ctx context.Context, f rpc.Filter) (wp1 *rpc.Workflow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "rpc.Peer.Next")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"f":   f}, map[string]interface{}{
				"wp1": wp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Peer.Next(ctx, f)
}

// RegisterAgent implements rpc.Peer
func (_d PeerWithTracing) RegisterAgent(ctx context.Context, platform string, backend string, version string, capacity int) (i1 int64, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "rpc.Peer.RegisterAgent")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"platform": platform,
				"backend":  backend,
				"version":  version,
				"capacity": capacity}, map[string]interface{}{
				"i1":  i1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Peer.RegisterAgent(ctx, platform, backend, version, capacity)
}

// ReportHealth implements rpc.Peer
func (_d PeerWithTracing) ReportHealth(ctx context.Context) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "rpc.Peer.ReportHealth")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Peer.ReportHealth(ctx)
}

// UnregisterAgent implements rpc.Peer
func (_d PeerWithTracing) UnregisterAgent(ctx context.Context) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "rpc.Peer.UnregisterAgent")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Peer.UnregisterAgent(ctx)
}

// Update implements rpc.Peer
func (_d PeerWithTracing) Update(ctx context.Context, id string, state rpc.State) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "rpc.Peer.Update")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":   ctx,
				"id":    id,
				"state": state}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Peer.Update(ctx, id, state)
}

// Version implements rpc.Peer
func (_d PeerWithTracing) Version(ctx context.Context) (vp1 *rpc.Version, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "rpc.Peer.Version")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx}, map[string]interface{}{
				"vp1": vp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Peer.Version(ctx)
}

// Wait implements rpc.Peer
func (_d PeerWithTracing) Wait(ctx context.Context, id string) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "rpc.Peer.Wait")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"id":  id}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Peer.Wait(ctx, id)
}
