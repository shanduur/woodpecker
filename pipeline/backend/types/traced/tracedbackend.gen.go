// Code generated by gowrap. DO NOT EDIT.
// template: ../../../../templates/opentelemetry.go.tpl
// gowrap: http://github.com/hexdigest/gowrap

package traced

//go:generate gowrap gen -p go.woodpecker-ci.org/woodpecker/v2/pipeline/backend/types -i Backend -t ../../../../templates/opentelemetry.go.tpl -o tracedbackend.gen.go -l ""

import (
	"context"
	"io"

	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
	"go.woodpecker-ci.org/woodpecker/v2/pipeline/backend/types"
)

// BackendWithTracing implements types.Backend interface instrumented with opentracing spans
type BackendWithTracing struct {
	types.Backend
	_instance      string
	_spanDecorator func(span trace.Span, params, results map[string]interface{})
}

// NewBackendWithTracing returns BackendWithTracing
func NewBackendWithTracing(base types.Backend, instance string, spanDecorator ...func(span trace.Span, params, results map[string]interface{})) BackendWithTracing {
	d := BackendWithTracing{
		Backend:   base,
		_instance: instance,
	}

	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	}

	return d
}

// DestroyStep implements types.Backend
func (_d BackendWithTracing) DestroyStep(ctx context.Context, step *types.Step, taskUUID string) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "types.Backend.DestroyStep")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"step":     step,
				"taskUUID": taskUUID}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Backend.DestroyStep(ctx, step, taskUUID)
}

// DestroyWorkflow implements types.Backend
func (_d BackendWithTracing) DestroyWorkflow(ctx context.Context, conf *types.Config, taskUUID string) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "types.Backend.DestroyWorkflow")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"conf":     conf,
				"taskUUID": taskUUID}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Backend.DestroyWorkflow(ctx, conf, taskUUID)
}

// IsAvailable implements types.Backend
func (_d BackendWithTracing) IsAvailable(ctx context.Context) (b1 bool) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "types.Backend.IsAvailable")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx}, map[string]interface{}{
				"b1": b1})
		}
		_span.End()
	}()
	return _d.Backend.IsAvailable(ctx)
}

// Load implements types.Backend
func (_d BackendWithTracing) Load(ctx context.Context) (bp1 *types.BackendInfo, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "types.Backend.Load")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx}, map[string]interface{}{
				"bp1": bp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Backend.Load(ctx)
}

// SetupWorkflow implements types.Backend
func (_d BackendWithTracing) SetupWorkflow(ctx context.Context, conf *types.Config, taskUUID string) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "types.Backend.SetupWorkflow")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"conf":     conf,
				"taskUUID": taskUUID}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Backend.SetupWorkflow(ctx, conf, taskUUID)
}

// StartStep implements types.Backend
func (_d BackendWithTracing) StartStep(ctx context.Context, step *types.Step, taskUUID string) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "types.Backend.StartStep")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"step":     step,
				"taskUUID": taskUUID}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Backend.StartStep(ctx, step, taskUUID)
}

// TailStep implements types.Backend
func (_d BackendWithTracing) TailStep(ctx context.Context, step *types.Step, taskUUID string) (r1 io.ReadCloser, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "types.Backend.TailStep")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"step":     step,
				"taskUUID": taskUUID}, map[string]interface{}{
				"r1":  r1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Backend.TailStep(ctx, step, taskUUID)
}

// WaitStep implements types.Backend
func (_d BackendWithTracing) WaitStep(ctx context.Context, step *types.Step, taskUUID string) (sp1 *types.State, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "types.Backend.WaitStep")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"step":     step,
				"taskUUID": taskUUID}, map[string]interface{}{
				"sp1": sp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Backend.WaitStep(ctx, step, taskUUID)
}
