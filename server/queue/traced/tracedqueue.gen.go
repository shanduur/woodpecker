// Code generated by gowrap. DO NOT EDIT.
// template: ../../../templates/opentelemetry.go.tpl
// gowrap: http://github.com/hexdigest/gowrap

package traced

//go:generate gowrap gen -p go.woodpecker-ci.org/woodpecker/v2/server/queue -i Queue -t ../../../templates/opentelemetry.go.tpl -o tracedqueue.gen.go -l ""

import (
	"context"

	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
	"go.woodpecker-ci.org/woodpecker/v2/server/model"
	"go.woodpecker-ci.org/woodpecker/v2/server/queue"
)

// QueueWithTracing implements queue.Queue interface instrumented with opentracing spans
type QueueWithTracing struct {
	queue.Queue
	_instance      string
	_spanDecorator func(span trace.Span, params, results map[string]interface{})
}

// NewQueueWithTracing returns QueueWithTracing
func NewQueueWithTracing(base queue.Queue, instance string, spanDecorator ...func(span trace.Span, params, results map[string]interface{})) QueueWithTracing {
	d := QueueWithTracing{
		Queue:     base,
		_instance: instance,
	}

	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	}

	return d
}

// Done implements queue.Queue
func (_d QueueWithTracing) Done(ctx context.Context, id string, exitStatus model.StatusValue) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "queue.Queue.Done")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":        ctx,
				"id":         id,
				"exitStatus": exitStatus}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Queue.Done(ctx, id, exitStatus)
}

// Error implements queue.Queue
func (_d QueueWithTracing) Error(ctx context.Context, id string, e1 error) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "queue.Queue.Error")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"id":  id,
				"e1":  e1}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Queue.Error(ctx, id, e1)
}

// ErrorAtOnce implements queue.Queue
func (_d QueueWithTracing) ErrorAtOnce(ctx context.Context, ids []string, e1 error) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "queue.Queue.ErrorAtOnce")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"ids": ids,
				"e1":  e1}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Queue.ErrorAtOnce(ctx, ids, e1)
}

// Evict implements queue.Queue
func (_d QueueWithTracing) Evict(ctx context.Context, id string) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "queue.Queue.Evict")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"id":  id}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Queue.Evict(ctx, id)
}

// EvictAtOnce implements queue.Queue
func (_d QueueWithTracing) EvictAtOnce(ctx context.Context, ids []string) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "queue.Queue.EvictAtOnce")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"ids": ids}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Queue.EvictAtOnce(ctx, ids)
}

// Extend implements queue.Queue
func (_d QueueWithTracing) Extend(ctx context.Context, id string) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "queue.Queue.Extend")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"id":  id}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Queue.Extend(ctx, id)
}

// Info implements queue.Queue
func (_d QueueWithTracing) Info(ctx context.Context) (i1 queue.InfoT) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "queue.Queue.Info")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx}, map[string]interface{}{
				"i1": i1})
		}
		_span.End()
	}()
	return _d.Queue.Info(ctx)
}

// Poll implements queue.Queue
func (_d QueueWithTracing) Poll(ctx context.Context, agentID int64, f queue.FilterFn) (tp1 *model.Task, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "queue.Queue.Poll")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":     ctx,
				"agentID": agentID,
				"f":       f}, map[string]interface{}{
				"tp1": tp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Queue.Poll(ctx, agentID, f)
}

// Push implements queue.Queue
func (_d QueueWithTracing) Push(ctx context.Context, task *model.Task) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "queue.Queue.Push")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"task": task}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Queue.Push(ctx, task)
}

// PushAtOnce implements queue.Queue
func (_d QueueWithTracing) PushAtOnce(ctx context.Context, tasks []*model.Task) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "queue.Queue.PushAtOnce")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":   ctx,
				"tasks": tasks}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Queue.PushAtOnce(ctx, tasks)
}

// Wait implements queue.Queue
func (_d QueueWithTracing) Wait(ctx context.Context, id string) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "queue.Queue.Wait")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"id":  id}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Queue.Wait(ctx, id)
}
